package isobuilder.compiler;

import com.google.common.base.Optional;
import com.google.common.collect.Iterables;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;

import javax.annotation.Generated;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.lang.model.element.Element;
import javax.lang.model.util.Elements;
import javax.tools.JavaFileObject;
import java.io.IOException;
import java.io.Writer;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.base.Throwables.propagateIfPossible;
import static javax.tools.Diagnostic.Kind.WARNING;

/**
 * A template class that provides a framework for properly handling IO while generating source files
 * from an annotation processor.  Particularly, it makes a best effort to ensure that files that
 * fail to write successfully are deleted.
 *
 * @param <T> The input type from which source is to be generated.
 */
abstract class SourceFileGenerator<T> {
  static final String GENERATED_COMMENTS = "https://github.com/h908714124/isobuilder";

  private static final AnnotationSpec GENERATED =
      AnnotationSpec.builder(Generated.class)
          .addMember("value", "$S", IsoProcessor.class.getName())
          .addMember("comments", "$S", GENERATED_COMMENTS)
          .build();

  private final Filer filer;
  private final Messager messager;
  private final boolean generatedAnnotationAvailable;

  SourceFileGenerator(Filer filer, Elements elements, Messager messager) {
    this.filer = checkNotNull(filer);
    generatedAnnotationAvailable = elements.getTypeElement("javax.annotation.Generated") != null;
    this.messager = checkNotNull(messager);
  }

  /**
   * Generates a source file to be compiled for {@code T}.
   */
  void generate(T input) throws SourceFileGenerationException {
    ClassName generatedTypeName = nameGeneratedType(input);
    try {
      Optional<TypeSpec.Builder> type = write(generatedTypeName, input);
      if (!type.isPresent()) {
        return;
      }
      JavaFile javaFile = buildJavaFile(generatedTypeName, type.get());
      JavaFileObject sourceFile = filer.createSourceFile(
          generatedTypeName.toString(),
          Iterables.toArray(javaFile.typeSpec.originatingElements, Element.class));
      try (Writer writer = sourceFile.openWriter()) {
        writer.write(javaFile.toString());
      } catch (IOException e) {
        String message = "Could not write generated class " + generatedTypeName + ": " + e;
        messager.printMessage(WARNING, message);
      }
    } catch (Exception e) {
      // if the code above threw a SFGE, use that
      propagateIfPossible(e, SourceFileGenerationException.class);
      // otherwise, throw a new one
      throw new SourceFileGenerationException(
          Optional.<ClassName>absent(), e, getElementForErrorReporting(input));
    }
  }

  private JavaFile buildJavaFile(
      ClassName generatedTypeName, TypeSpec.Builder typeSpecBuilder) {
    if (generatedAnnotationAvailable) {
      typeSpecBuilder.addAnnotation(GENERATED);
    }
    JavaFile.Builder javaFileBuilder =
        JavaFile.builder(generatedTypeName.packageName(), typeSpecBuilder.build())
            .skipJavaLangImports(true);
    if (!generatedAnnotationAvailable) {
      javaFileBuilder.addFileComment(
          "Generated by $L ($L).", IsoProcessor.class.getName(), GENERATED_COMMENTS);
    }
    return javaFileBuilder.build();
  }

  /**
   * Implementations should return the {@link ClassName} for the top-level type to be generated.
   */
  abstract ClassName nameGeneratedType(T input);

  /**
   * Returns an optional element to be used for reporting errors. This returns a single element
   * rather than a collection to reduce output noise.
   */
  abstract Optional<? extends Element> getElementForErrorReporting(T input);

  /**
   * Returns a {@link TypeSpec.Builder type} to be generated for {@code T}, or {@link
   * Optional#absent()} if no file should be generated.
   */
  abstract Optional<TypeSpec.Builder> write(ClassName generatedTypeName, T input);
}
